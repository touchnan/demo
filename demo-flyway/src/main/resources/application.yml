spring:
  profiles:
    group:
      dev: "dev,dev-db"
      prod: "prod,prod-db"
    active: dev
  flyway:
    # 是否启用flyway
    enabled: true
#    # 编码格式，默认UTF-8
#    encoding: UTF-8
#    # 迁移sql脚本文件存放路径，默认db/migration
#    locations: classpath:db/migration
#    # 迁移sql脚本文件名称的前缀，默认V
#    sql-migration-prefix: V
#    # 迁移sql脚本文件名称的分隔符，默认2个下划线__
#    sql-migration-separator: __
#    # 迁移sql脚本文件名称的后缀
#    sql-migration-suffixes: .sql
#    # 迁移时是否进行校验，默认true
#    validate-on-migrate: true
#    # 当迁移发现数据库非空且存在没有元数据的表时，自动执行基准迁移，新建schema_version表
#    #是否开启基线迁移 当数据库已有数据或表时，设置为true才可以执行，以已存在的数据作为一个基础版本，基础版本的版本号通过baseline-version设置
    baseline-on-migrate: true
#    #指定基线对应的版本号，默认是1
#    baseline-version: 0

#    # 启用或禁用 flyway
#    enabled: true
#    # flyway 的 clean 命令会删除指定 schema 下的所有 table, 生产务必禁掉。这个默认值是 false 理论上作为默认配置是不科学的。
#    clean-disabled: true
#    # SQL 脚本的目录,多个路径使用逗号分隔 默认值 classpath:db/migration
#    locations: classpath:db/migration
#    #  metadata 版本控制信息表 默认 flyway_schema_history
#    table: flyway_schema_history
#    # 如果没有 flyway_schema_history 这个 metadata 表， 在执行 flyway migrate 命令之前, 必须先执行 flyway baseline 命令
#    # 设置为 true 后 flyway 将在需要 baseline 的时候, 自动执行一次 baseline。
#    baseline-on-migrate: true
#    # 指定 baseline 的版本号,默认值为 1, 低于该版本号的 SQL 文件, migrate 时会被忽略
#    baseline-version: 1
#    # 字符编码 默认 UTF-8
#    encoding: UTF-8
#    # 是否允许不按顺序迁移 开发建议 true  生产建议 false
#    out-of-order: false
#    # 需要 flyway 管控的 schema list,这里我们配置为flyway  缺省的话, 使用spring.datasource.url 配置的那个 schema,
#    # 可以指定多个schema, 但仅会在第一个schema下建立 metadata 表, 也仅在第一个schema应用migration sql 脚本.
#    # 但flyway Clean 命令会依次在这些schema下都执行一遍. 所以 确保生产 spring.flyway.clean-disabled 为 true
#    schemas: flyway
#    # 执行迁移时是否自动调用验证   当你的 版本不符合逻辑 比如 你先执行了 DML 而没有 对应的DDL 会抛出异常
#    validate-on-migrate: true

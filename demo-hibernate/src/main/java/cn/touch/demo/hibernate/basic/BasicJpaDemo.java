/**
 * 
 */
package cn.touch.demo.hibernate.basic;

/**
 * Dec 4, 2014
 *
 * @author <a href="mailto:touchnan@gmail.com">chegnqiang.han</a>
 */
public class BasicJpaDemo {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        User user = new User();
        // Note: id generated by Hibernate
        user.setName( "Brett Meyer" );
        user.setEmail( "foo@foo.com" );
        user.setPhone( "123-456-7890" );
        
       // insertUser( user );
        //user = getUser(1);
    }
    
    
    /*-
    private static User getUser(int id) throws SQLException {
        EntityManager entityManager = openEntityManager();
        
        User user = entityManager.find( User.class, id );
        
//      Query query = entityManager.createQuery( "SELECT u FROM User u WHERE u.id=:id" );
//      query.setParameter( "id", id );
//      User user = (User) query.getSingleResult();
        
//      CriteriaBuilder builder = entityManager.getCriteriaBuilder();
//      CriteriaQuery<User> criteria = builder.createQuery( User.class );
//      Root<User> root = criteria.from( User.class );
//      criteria.select( root );
//      criteria.where( builder.equal( root.get( "id" ), id ) );
//      User user = entityManager.createQuery( criteria ).getSingleResult();
        
        Hibernate.initialize( user.getTools() );
        Hibernate.initialize( user.getSkills() );
        
        entityManager.close();
        
        return user;
    }
    
    private static void insertUser(User user) throws Exception {
        EntityManager entityManager = openEntityManager();
        entityManager.getTransaction().begin();
        entityManager.persist( user ); // cascades the tool & skill relationships
        entityManager.getTransaction().commit();
    }
    
    private static EntityManagerFactory entityManagerFactory = null;
    private static EntityManager openEntityManager() {
        if (entityManagerFactory == null) {
            entityManagerFactory = Persistence.createEntityManagerFactory( "Demo" );
        }
        return entityManagerFactory.createEntityManager();
    }*/

}
